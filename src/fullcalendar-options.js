/*
the docs point to this file as an index of options.
when this files is moved, update the docs.
*/

/*
important to define booleans (with correct default) so attributes can be defined like:
<FullCalendar editable />
*/
export const INPUT_DEFS = {
  header: {},
  footer: {},
  customButtons: {},
  buttonIcons: {},
  themeSystem: {},
  bootstrapFontAwesome: {},
  firstDay: {},
  dir: {},
  weekends: { type: Boolean, default: true },
  hiddenDays: {},
  fixedWeekCount: { type: Boolean, default: false },
  weekNumbers: { type: Boolean, default: false },
  weekNumbersWithinDays: { type: Boolean, default: false },
  weekNumberCalculation: {},
  businessHours: {},
  showNonCurrentDates: { type: Boolean, default: true },
  height: {},
  contentHeight: {},
  aspectRatio: {},
  handleWindowResize: { type: Boolean, default: true },
  windowResizeDelay: {},
  eventLimit: {},
  eventLimitClick: {},
  timeZone: {},
  now: {},
  defaultView: {},
  allDaySlot: { type: Boolean, default: false },
  allDayText: {},
  slotDuration: {},
  slotLabelFormat: {},
  slotLabelInterval: {},
  snapDuration: {},
  scrollTime: {},
  minTime: {},
  maxTime: {},
  slotEventOverlap: { type: Boolean, default: false },
  listDayFormat: {},
  listDayAltFormat: {},
  noEventsMessage: {},
  defaultDate: {},
  nowIndicator: { type: Boolean, default: false },
  visibleRange: {},
  validRange: {},
  dateIncrement: {},
  dateAlignment: {},
  duration: {},
  dayCount: {},
  locales: {},
  locale: {},
  eventTimeFormat: {},
  columnHeader: { type: Boolean, default: true },
  columnHeaderFormat: {},
  columnHeaderText: {},
  columnHeaderHtml: {},
  titleFormat: {},
  weekLabel: {},
  displayEventTime: { type: Boolean, default: false },
  displayEventEnd: { type: Boolean, default: false },
  eventLimitText: {},
  dayPopoverFormat: {},
  navLinks: { type: Boolean, default: false },
  navLinkDayClick: {},
  navLinkWeekClick: {},
  selectable: { type: Boolean, default: false },
  selectMirror: { type: Boolean, default: false },
  unselectAuto: { type: Boolean, default: true },
  unselectCancel: {},
  defaultAllDayEventDuration: {},
  defaultTimedEventDuration: {},
  cmdFormatter: {},
  defaultRangeSeparator: {},
  selectConstraint: {},
  selectOverlap: {},
  selectAllow: {},
  editable: { type: Boolean, default: false },
  eventStartEditable: { type: Boolean, default: false },
  eventDurationEditable: { type: Boolean, default: false },
  eventConstraint: {},
  eventOverlap: {},
  eventAllow: {},
  eventClassName: {},
  eventClassNames: {},
  eventBackgroundColor: {},
  eventBorderColor: {},
  eventTextColor: {},
  eventColor: {},
  events: {},
  eventSources: {},
  allDayDefault: { type: Boolean, default: false },
  startParam: {},
  endParam: {},
  lazyFetching: { type: Boolean, default: true },
  nextDayThreshold: {},
  eventOrder: {},
  rerenderDelay: {},
  dragRevertDuration: {},
  dragScroll: { type: Boolean, default: true },
  longPressDelay: {},
  eventLongPressDelay: {},
  droppable: { type: Boolean, default: false },
  dropAccept: {},
  eventDataTransform: {},
  allDayMaintainDuration: { type: Boolean, default: false },
  eventResizableFromStart: { type: Boolean, default: false },
  // compound OptionsInput...
  buttonText: {},
  views: {},
  plugins: {},
  // scheduler...
  schedulerLicenseKey: {},
  resources: {},
  resourceLabelText: {},
  resourceOrder: {},
  filterResourcesWithEvents: {},
  resourceText: {},
  resourceGroupField: {},
  resourceGroupText: {},
  resourceAreaWidth: {},
  resourceColumns: {},
  resourcesInitiallyExpanded: {},
  slotWidth: {},
  datesAboveResources: {}
}

export const EVENT_NAMES = [
  'datesRender',
  'datesDestroy',
  'dayRender',
  'windowResize',
  'dateClick',
  'eventClick',
  'eventMouseEnter',
  'eventMouseLeave',
  'select',
  'unselect',
  'loading',
  'eventRender',
  'eventPositioned',
  '_eventsPositioned',
  'eventDestroy',
  'eventDragStart',
  'eventDragStop',
  'eventDrop',
  'eventResizeStart',
  'eventResizeStop',
  'eventResize',
  'drop',
  'eventReceive',
  'eventLeave',
  'viewSkeletonRender',
  'viewSkeletonDestroy',
  '_destroyed',
  // scheduler...
  'resourceRender'
]
